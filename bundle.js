'use strict';

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var performanceNow = createCommonjsModule(function (module) {
// Generated by CoffeeScript 1.12.2
(function() {
  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
    module.exports = function() {
      return performance.now();
    };
  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
    module.exports = function() {
      return (getNanoSeconds() - nodeLoadTime) / 1e6;
    };
    hrtime = process.hrtime;
    getNanoSeconds = function() {
      var hr;
      hr = hrtime();
      return hr[0] * 1e9 + hr[1];
    };
    moduleLoadTime = getNanoSeconds();
    upTime = process.uptime() * 1e9;
    nodeLoadTime = moduleLoadTime - upTime;
  } else if (Date.now) {
    module.exports = function() {
      return Date.now() - loadTime;
    };
    loadTime = Date.now();
  } else {
    module.exports = function() {
      return new Date().getTime() - loadTime;
    };
    loadTime = new Date().getTime();
  }

}).call(commonjsGlobal);


});

var performanceNow$1 = /*#__PURE__*/Object.freeze({
	default: performanceNow,
	__moduleExports: performanceNow
});

var now = ( performanceNow$1 && performanceNow ) || performanceNow$1;

var root = typeof window === 'undefined' ? commonjsGlobal : window
  , vendors = ['moz', 'webkit']
  , suffix = 'AnimationFrame'
  , raf = root['request' + suffix]
  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix];

for(var i = 0; !raf && i < vendors.length; i++) {
  raf = root[vendors[i] + 'Request' + suffix];
  caf = root[vendors[i] + 'Cancel' + suffix]
      || root[vendors[i] + 'CancelRequest' + suffix];
}

// Some versions of FF have rAF but not cAF
if(!raf || !caf) {
  var last = 0
    , id = 0
    , queue = []
    , frameDuration = 1000 / 60;

  raf = function(callback) {
    if(queue.length === 0) {
      var _now = now()
        , next = Math.max(0, frameDuration - (_now - last));
      last = next + _now;
      setTimeout(function() {
        var cp = queue.slice(0);
        // Clear queue here to prevent
        // callbacks from appending listeners
        // to the current frame's queue
        queue.length = 0;
        for(var i = 0; i < cp.length; i++) {
          if(!cp[i].cancelled) {
            try{
              cp[i].callback(last);
            } catch(e) {
              setTimeout(function() { throw e }, 0);
            }
          }
        }
      }, Math.round(next));
    }
    queue.push({
      handle: ++id,
      callback: callback,
      cancelled: false
    });
    return id
  };

  caf = function(handle) {
    for(var i = 0; i < queue.length; i++) {
      if(queue[i].handle === handle) {
        queue[i].cancelled = true;
      }
    }
  };
}

var raf_1 = function(fn) {
  // Wrap in a new function to prevent
  // `cancel` potentially being assigned
  // to the native rAF function
  return raf.call(root, fn)
};
var cancel = function() {
  caf.apply(root, arguments);
};
var polyfill = function(object) {
  if (!object) {
    object = root;
  }
  object.requestAnimationFrame = raf;
  object.cancelAnimationFrame = caf;
};
raf_1.cancel = cancel;
raf_1.polyfill = polyfill;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LazyElement = function () {
  function LazyElement(el, bindings, options) {
    _classCallCheck(this, LazyElement);

    this.el = el;
    this.bindings = bindings;
    this.options = options;
    this.state = 'loading';
  }

  _createClass(LazyElement, [{
    key: 'preloadImage',
    value: function preloadImage(resolve) {
      var image = new Image();
      image.src = this.bindings.value;
      image.onload = function () {
        resolve(image);
        image = null;
      };
    }
  }, {
    key: 'reset',
    value: function reset(newValue) {
      this.el.setAttribute('src', '');
      this.bindings.value = newValue;
      this.el.classList.remove(this.options.onLoadClassName);
      this.state = 'loading';
      this.render();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this = this;

      var cb = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {};

      if (this.state === 'loaded') return cb(false);
      if (!this.isElInView()) return cb(false);
      this.preloadImage(function (image) {
        _this.el.setAttribute('src', image.src);
        _this.el.classList.add(_this.options.onLoadClassName);
        _this.state = 'loaded';
        cb(true);
      });
    }
  }, {
    key: 'isElInView',
    value: function isElInView() {
      var rect = this.el.getBoundingClientRect();
      return rect.top > 0 && rect.top < window.innerHeight || rect.top < 0 && rect.top > -rect.height;
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.el = null;
      this.bindings = null;
    }
  }]);

  return LazyElement;
}();

var LazyLoad = function LazyLoad(Vue, options) {
  var _this2 = this;

  _classCallCheck(this, LazyLoad);

  this.queue = [];
  this.windowHeight = window.innerHeight;
  this.windowWidth = window.innerWidth;
  this.scrollY = -1;

  this.detectWindowChange = function () {
    if (_this2.scrollY !== window.pageYOffset || _this2.windowHeight !== window.innerHeight || _this2.windowWidth !== window.innerWidth) {
      _this2.batchRender();
    }
    raf_1(_this2.detectWindowChange);
  };

  this.batchRender = function () {
    if (!_this2.queue.length) return;
    for (var i = _this2.queue.length; i--; i >= 0) {
      _this2.queue[i].render();
    }
  };

  this.bind = function (el, bindings, vNode) {
    el.$lazyEl = new LazyElement(el, bindings, _this2.options);
    _this2.vue.nextTick(function () {
      el.$lazyEl.render(function (rendered) {
        if (!rendered) _this2.queue.push(el.$lazyEl);
      });
    });
  };

  this.update = function (el, bindings, vNode, oldNode) {
    if (bindings.oldValue !== bindings.value) {
      el.$lazyEl.reset(bindings.value);
    }
  };

  this.remove = function (el) {
    el.$lazyEl.destroy();
    el.$lazyEl = null;
  };

  this.vue = Vue;
  this.options = options;
  this.detectWindowChange();
};

var index = {
  install: function install(Vue) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var lazyload = new LazyLoad(Vue, options);

    Vue.directive('lazy-load', {
      bind: lazyload.bind,
      unbind: lazyload.remove,
      update: lazyload.update
    });
  }
};

module.exports = index;
